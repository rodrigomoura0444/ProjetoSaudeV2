[
  {
    "id": "f1c1b2a0.000001",
    "type": "tab",
    "label": "Monitoracao Pacientes",
    "disabled": false,
    "info": ""
  },
  {
    "id": "inject_sim",
    "type": "inject",
    "z": "f1c1b2a0.000001",
    "name": "Start Simulation (1s)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": 0.5,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "wires": [
      [
        "function_gen"
      ]
    ]
  },
  {
    "id": "function_gen",
    "type": "function",
    "z": "f1c1b2a0.000001",
    "name": "Gerar sinais e enviar a uibuilder",
    "func": "// Se receber msg.payload === 'external' -> passa dados recebidos pelo HTTP\nif(msg.payload && msg.payload.tipo === 'external_batch'){\n    // Dados já bem formados vindos de HTTP POST\n    return {payload: {tipo:'update_batch', dados: msg.payload.dados}};\n}\n// Caso contrário, gera dados simulados (3 pacientes)\nconst pacientes = ['Paciente A','Paciente B','Paciente C'];\nconst datas = pacientes.map((p, i) => {\n  const batimentos = Math.round(60 + Math.random()*60 + (i*3 - 3));\n  const temperatura = parseFloat((36 + Math.random()*2 + i*0.1).toFixed(1));\n  const spo2 = Math.round(92 + Math.random()*8 - i);\n  const pa_s = Math.round(110 + Math.random()*20);\n  const pa_d = Math.round(70 + Math.random()*15);\n  return {\n    paciente: p,\n    batimentos, temperatura, spo2, pa: {sistolica: pa_s, diastolica: pa_d}, ts: Date.now()\n  };\n});\nreturn {payload: {tipo:'update_batch', dados: datas}};\n",
    "outputs": 1,
    "noerr": 0,
    "wires": [
      [
        "uibuilder_out"
      ]
    ]
  },
  {
    "id": "http_in",
    "type": "http in",
    "z": "f1c1b2a0.000001",
    "name": "Receber dados Python POST /paciente",
    "url": "/paciente",
    "method": "post",
    "swaggerDoc": "",
    "x": 160,
    "y": 220,
    "wires": [
      [
        "http_body",
        "function_forward"
      ]
    ]
  },
  {
    "id": "http_body",
    "type": "http response",
    "z": "f1c1b2a0.000001",
    "name": "Resposta 200",
    "statusCode": "",
    "headers": {},
    "x": 740,
    "y": 220,
    "wires": []
  },
  {
    "id": "function_forward",
    "type": "function",
    "z": "f1c1b2a0.000001",
    "name": "Formatar batch externo",
    "func": "// Espera que o body contenha {dados:[{...},{...}]}\nconst body = msg.req && msg.req.body ? msg.req.body : null;\nif(body && Array.isArray(body.dados)){\n  // Encaminha para o nó principal como payload tipo external_batch\n  return {payload: {tipo:'external_batch', dados: body.dados}};\n} else {\n  // Se não for o formato esperado, devolve 400\n  msg.res.statusCode = 400;\n  msg.res.end('Formato inválido: esperar {dados:[...]}');\n  return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "wires": [
      [
        "function_gen",
        "http_body"
      ]
    ]
  },
  {
    "id": "uibuilder_out",
    "type": "uibuilder",
    "z": "f1c1b2a0.000001",
    "name": "uibuilder",
    "topic": "",
    "url": "uibuilder",
    "fwdInMessages": false,
    "allowScripts": true,
    "allowStyle": true,
    "copyIndex": true,
    "x": 520,
    "y": 160,
    "wires": []
  }
]
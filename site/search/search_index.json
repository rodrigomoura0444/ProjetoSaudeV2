{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ProjetoSaudeV2","text":""},{"location":"#1-introduction","title":"1. Introduction","text":"<p>ProjetoSaudeV2 is an educational and technical initiative designed to demonstrate how automation, data processing, and web visualization can be integrated into a unified, real-time healthcare monitoring system.</p>"},{"location":"#2-overview","title":"2. Overview","text":"<p>The primary objective of this project is to simulate and monitor the vital signs of multiple patients \u2014 including heart rate, temperature, oxygen saturation (SpO\u2082), and blood pressure \u2014 using a modern, modular, and open-source architecture.</p> <p>Core Components: - Node-RED: Manages data flow, system logic, and automation. - Python: Simulates and transmits real-time patient data. - SQLite: Provides local, persistent storage for medical readings. - uibuilder (HTML/CSS/JS): Delivers real-time visualization through a responsive web dashboard. - MkDocs: Generates structured and professional project documentation.</p>"},{"location":"#3-key-features","title":"3. Key Features","text":"<ul> <li>Real-time simulation, processing, and visualization of patient data.  </li> <li>RESTful API for querying historical health records.  </li> <li>Local database ensuring persistence without external dependencies.  </li> <li>Responsive and modern user interface for accessibility across devices.  </li> <li>Modular system architecture, easily adaptable for IoT or sensor-based integration.</li> </ul>"},{"location":"#4-system-architecture","title":"4. System Architecture","text":"<p>The architecture integrates Python, Node-RED, and SQLite through HTTP communication, with uibuilder providing the visualization layer.</p> <pre><code>Python Simulator \u2192 Node-RED \u2192 SQLite Database \u2192 uibuilder Dashboard\n</code></pre> <p>Each layer operates independently, ensuring modularity, scalability, and fault tolerance.</p>"},{"location":"#5-quick-start-guide","title":"5. Quick Start Guide","text":"<pre><code># 1. Start Node-RED\nnode-red\n\n# 2. Run the Python simulator\ncd python\npython simular_enviar.py\n\n# 3. Open the web dashboard\nhttp://localhost:1880/uibuilder/ProjetoSaudeV2\n</code></pre>"},{"location":"#6-about","title":"6. About","text":"<p>This project was developed by Rodrigo Moura as part of an academic initiative to explore data management and real-time health monitoring systems.</p> <p>Integrating automation, programming, and data visualization to create efficient and intelligent healthcare solutions.</p>"},{"location":"anexos/","title":"ProjetoSaudeV2 \u2014 Results","text":""},{"location":"anexos/#1-overview","title":"1. Overview","text":"<p>After integrating the Python, Node-RED, SQLite, and uibuilder modules, the system operated as a fully integrated platform, enabling real-time monitoring of patients\u2019 vital signs.</p>"},{"location":"anexos/#2-system-performance","title":"2. System Performance","text":"<ul> <li>Real-time updates: Data generated by the Python simulator appeared instantly on the uibuilder dashboard.  </li> <li>Database storage: All readings were correctly recorded in the SQLite database without delay.  </li> <li>API functionality: The endpoints <code>/paciente</code> and <code>/api/v1/vitals</code> responded properly, returning valid JSON data.  </li> <li>Web interface: The dashboard displayed patients side by side, updating automatically with each new data set.</li> </ul>"},{"location":"anexos/#3-component-results","title":"3. Component Results","text":"Component Result Python Successfully generated and transmitted simulated vital signs. Node-RED Processed and stored data without errors. SQLite Logged and retrieved measurements accurately. uibuilder Displayed real-time updates smoothly in the browser."},{"location":"anexos/#4-example-api-response","title":"4. Example API Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"ts_ms\": 1739600000000,\n      \"heart_rate\": 78,\n      \"temperature\": 36.6,\n      \"spo2\": 97,\n      \"systolic\": 121,\n      \"diastolic\": 79\n    }\n  ]\n}\n</code></pre>"},{"location":"anexos/#5-overall-evaluation","title":"5. Overall Evaluation","text":"<p>The system achieved all planned objectives: - Complete integration of simulation, processing, storage, and visualization. - Stable real-time communication between backend and frontend. - Consistent performance across multiple data cycles. - Clean and educational architecture suitable for academic purposes.</p>"},{"location":"anexos/#6-conclusion","title":"6. Conclusion","text":"<p>ProjetoSaudeV2 demonstrates effective integration between automation and programming tools, resulting in a simple, efficient, and reliable healthcare monitoring system. The prototype fully meets its purpose, showcasing real-time data flow across interconnected technologies.</p>"},{"location":"arquitetura/","title":"ProjetoSaudeV2 \u2014 System Architecture","text":""},{"location":"arquitetura/#1-overview","title":"1. Overview","text":"<p>ProjetoSaudeV2 is structured around four core layers that communicate through HTTP requests and local data storage mechanisms.</p> <pre><code>[ Python Simulator ]\n        \u2502  POST /paciente (JSON)\n        \u25bc\n[ Node-RED ] \u2192 Processing &amp; Validation \u2192 [ SQLite Database ]\n     \u2502\n     \u2514\u2500\u2500\u25ba uibuilder (HTML/CSS/JS) \u2192 Web Dashboard (Real-Time)\n</code></pre> <ul> <li>Python \u2014 Generates and transmits simulated patient vital signs.  </li> <li>Node-RED \u2014 Receives, validates, and stores the data.  </li> <li>SQLite \u2014 Maintains the historical record of all measurements.  </li> <li>uibuilder \u2014 Provides a responsive and interactive web dashboard for real-time visualization.</li> </ul>"},{"location":"arquitetura/#2-components-and-roles","title":"2. Components and Roles","text":""},{"location":"arquitetura/#21-python-simular_enviarpy","title":"2.1 Python (simular_enviar.py)","text":"<ul> <li>Generates randomized vital sign data (heart rate, temperature, SpO\u2082, blood pressure).  </li> <li>Sends this data to Node-RED via an HTTP POST request to <code>/paciente</code>.</li> </ul>"},{"location":"arquitetura/#22-node-red","title":"2.2 Node-RED","text":"<ul> <li>HTTP In <code>/paciente</code> \u2014 Receives JSON input from the Python simulator.  </li> <li>Function: Format external batch \u2014 Validates and normalizes incoming data.  </li> <li>Function: Build INSERT in vitals \u2014 Constructs SQL statements for database storage.  </li> <li>SQLite (INSERT vitals) \u2014 Saves all validated data.  </li> <li>HTTP GET <code>/api/v1/vitals</code> \u2014 Exposes historical data through an API endpoint.  </li> <li>uibuilder \u2014 Pushes live updates to the frontend dashboard.</li> </ul>"},{"location":"arquitetura/#23-sqlite","title":"2.3 SQLite","text":"<ul> <li>Stores patient records and corresponding vital measurements.  </li> <li>Provides fast and lightweight local data access, avoiding remote server dependencies.</li> </ul>"},{"location":"arquitetura/#24-uibuilder","title":"2.4 uibuilder","text":"<ul> <li>Displays real-time patient information in a web-based interface.  </li> <li>Implements a responsive layout using standard HTML, CSS, and JavaScript technologies.</li> </ul>"},{"location":"arquitetura/#3-data-flow","title":"3. Data Flow","text":""},{"location":"arquitetura/#a-data-ingestion-python-node-red-sqlite-ui","title":"A) Data Ingestion (Python \u2192 Node-RED \u2192 SQLite \u2192 UI)","text":"<ol> <li>Python sends data batches to Node-RED via <code>POST /paciente</code>.  </li> <li>Node-RED processes and stores the data in SQLite.  </li> <li>uibuilder reflects the updated information automatically on the dashboard.</li> </ol>"},{"location":"arquitetura/#b-data-query-ui-api","title":"B) Data Query (UI \u2192 API)","text":"<ol> <li>The user interface or external client sends a request to <code>/api/v1/vitals?patient_id=1&amp;minutes=60</code>.  </li> <li>Node-RED queries SQLite and returns a structured JSON response.</li> </ol>"},{"location":"arquitetura/#4-api-endpoints","title":"4. API Endpoints","text":""},{"location":"arquitetura/#post-paciente","title":"POST <code>/paciente</code>","text":"<p>Request Example:</p> <pre><code>[\n  {\n    \"paciente\": \"Maria Silva\",\n    \"batimentos\": 78,\n    \"temperatura\": 36.7,\n    \"spo2\": 97,\n    \"pa\": { \"sistolica\": 120, \"diastolica\": 80 },\n    \"ts\": 1739600000000\n  }\n]\n</code></pre> <p>Response: <code>HTTP 200 OK</code></p>"},{"location":"arquitetura/#get-apiv1vitalspatient_ididminuteswindow","title":"GET <code>/api/v1/vitals?patient_id={id}&amp;minutes={window}</code>","text":"<p>Response Example:</p> <pre><code>{\n  \"data\": [\n    {\n      \"ts_ms\": 1739600000000,\n      \"heart_rate\": 78,\n      \"temperature\": 36.7,\n      \"spo2\": 97,\n      \"systolic\": 120,\n      \"diastolic\": 80\n    }\n  ]\n}\n</code></pre>"},{"location":"arquitetura/#5-database-model-sqlite","title":"5. Database Model (SQLite)","text":"<pre><code>CREATE TABLE patients (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL,\n  birthdate TEXT,\n\n);\n\nCREATE TABLE vitals (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,\n  ts_ms INTEGER NOT NULL,\n  heart_rate INTEGER,\n  temperature REAL,\n  spo2 INTEGER,\n  systolic INTEGER,\n  diastolic INTEGER\n);\n\nCREATE INDEX idx_vitals_patient_ts ON vitals(patient_id, ts_ms DESC);\n</code></pre>"},{"location":"arquitetura/#6-node-red-flow-design","title":"6. Node-RED Flow Design","text":"<pre><code>[HTTP in POST /paciente]\n     \u2193\n[Function: Format external batch]\n     \u2193\n[Function: Build INSERT in vitals]\n     \u2193\n[SQLite: INSERT vitals]\n     \u2193\n[HTTP response 200]\n\n[HTTP in GET /api/v1/vitals]\n     \u2193\n[Function: Build query (OK/ERROR)]\n   \u251c\u2500\u2500 OK \u2192 [SQLite: SELECT history] \u2192 [Function: to JSON] \u2192 [HTTP 200]\n   \u2514\u2500\u2500 ERROR \u2192 [HTTP error]\n</code></pre>"},{"location":"arquitetura/#7-summary","title":"7. Summary","text":"<p>The architecture of ProjetoSaudeV2 is modular, scalable, and maintainable. It combines Python-based simulation, Node-RED automation, SQLite persistence, and uibuilder visualization into a cohesive ecosystem for real-time patient monitoring.</p>"},{"location":"node-red/","title":"Node-RED Flow \u2014 ProjetoSaudeV2","text":""},{"location":"node-red/#1-overview","title":"1. Overview","text":"<p>The Node-RED platform functions as the central logic and automation layer of the system. It interconnects the Python simulator, SQLite database, and uibuilder interface \u2014 ensuring seamless data flow, validation, and real-time updates across all components.</p>"},{"location":"node-red/#2-main-functions","title":"2. Main Functions","text":"<ul> <li>Data Reception: Receives simulated patient data via the <code>/paciente</code> endpoint (HTTP POST).  </li> <li>Data Processing and Validation: Parses and verifies the integrity of the incoming JSON payload.  </li> <li>Database Insertion: Inserts validated records into the local SQLite database.  </li> <li>Dashboard Service: Provides a live visualization interface through uibuilder.  </li> <li>API Provision: Exposes the <code>/api/v1/vitals</code> endpoint for historical data retrieval.</li> </ul>"},{"location":"node-red/#3-core-nodes-utilized","title":"3. Core Nodes Utilized","text":"Node Type Description HTTP In Handles incoming POST requests at <code>/paciente</code>. Function Formats, validates, and transforms incoming data. SQLite Executes SQL commands to insert or query records. HTTP Response Returns acknowledgment responses (HTTP 200 OK). uibuilder Manages the frontend interface and real-time data updates. HTTP In (GET /api/v1/vitals) Provides access to historical data through an API."},{"location":"node-red/#4-data-flow","title":"4. Data Flow","text":"<pre><code>[HTTP In POST /paciente]\n     \u2193\n[Function: Format external batch]\n     \u2193\n[Function: Build SQL INSERT]\n     \u2193\n[SQLite: INSERT vitals]\n     \u2193\n[HTTP Response 200 OK]\n\n[HTTP In GET /api/v1/vitals]\n     \u2193\n[Function: Build SQL SELECT]\n     \u2193\n[SQLite: SELECT vitals]\n     \u2193\n[Function: Format JSON output]\n     \u2193\n[HTTP Response 200 OK]\n</code></pre>"},{"location":"node-red/#5-api-endpoints","title":"5. API Endpoints","text":""},{"location":"node-red/#post-paciente","title":"POST <code>/paciente</code>","text":"<p>Purpose: Receives vital sign data transmitted by the Python simulator. Response: Returns <code>HTTP 200 OK</code> upon successful insertion into the database.</p>"},{"location":"node-red/#get-apiv1vitals","title":"GET <code>/api/v1/vitals</code>","text":"<p>Purpose: Allows retrieval of historical patient data. Parameters: <code>patient_id</code>, <code>minutes</code> (time window). Response: Returns structured JSON data containing vital sign history.</p>"},{"location":"node-red/#6-flow-export","title":"6. Flow Export","text":"<p>The complete Node-RED flow configuration is available in the file: <code>node-red/flows_MonitoracaoPacientes.json</code></p> <p>This export includes: - Full HTTP input/output configuration. - SQLite integration for local data persistence. - Real-time dashboard connection via uibuilder. - Error handling and data validation logic.</p>"},{"location":"node-red/#7-summary","title":"7. Summary","text":"<p>The Node-RED flow serves as the core logic engine of ProjetoSaudeV2. It connects simulation, data processing, storage, and visualization within a unified, modular, and low-code environment \u2014 providing both reliability and educational clarity.</p>"},{"location":"objetivos/","title":"Objectives \u2014 ProjetoSaudeV2","text":""},{"location":"objetivos/#1-overview","title":"1. Overview","text":"<p>ProjetoSaudeV2 is designed to develop an intelligent and modular patient monitoring system, combining Node-RED, Python, SQLite, and uibuilder into a unified and interactive platform.</p> <p>The system is capable of simulating, collecting, storing, and visualizing vital signs \u2014 including heart rate, temperature, oxygen saturation (SpO\u2082), and blood pressure \u2014 for multiple patients in real time.</p>"},{"location":"objetivos/#2-general-objectives","title":"2. General Objectives","text":"<ul> <li>Develop a real-time health monitoring platform.  </li> <li>Integrate automation, data processing, and visualization technologies within a single framework.  </li> <li>Demonstrate how Node-RED can serve as a bridge between data flow management, databases, and frontend interfaces.</li> </ul>"},{"location":"objetivos/#3-specific-objectives","title":"3. Specific Objectives","text":"<ul> <li>Create a Python-based simulator to generate and transmit patient vital data.  </li> <li>Configure Node-RED to process incoming data and store it in SQLite.  </li> <li>Design a responsive web dashboard using uibuilder for real-time monitoring.  </li> <li>Implement a REST API for structured access to historical patient data.  </li> <li>Produce comprehensive and professional documentation using MkDocs.</li> </ul>"},{"location":"objetivos/#4-summary","title":"4. Summary","text":"<p>ProjetoSaudeV2 illustrates how software integration and process automation can be effectively applied to healthcare solutions. It demonstrates the creation of a modern, accessible, and extensible system for real-time patient monitoring and educational research purposes.</p>"},{"location":"referencias/","title":"References \u2014 ProjetoSaudeV2","text":""},{"location":"referencias/#1-overview","title":"1. Overview","text":"<p>This project was developed through the integration of multiple open-source tools and frameworks. The following references include the primary documentation, repositories, and resources that supported the development of ProjetoSaudeV2.</p>"},{"location":"referencias/#2-node-red","title":"2. Node-RED","text":"<ul> <li>Official Documentation: https://nodered.org/docs </li> <li>GitHub Repository: https://github.com/node-red/node-red </li> <li>uibuilder Package: https://totof.gitbook.io/uibuilder/</li> </ul>"},{"location":"referencias/#3-uibuilder","title":"3. uibuilder","text":"<ul> <li>Official Documentation: https://totof.gitbook.io/uibuilder/ </li> <li>GitHub Repository: https://github.com/TotallyInformation/node-red-contrib-uibuilder</li> </ul>"},{"location":"referencias/#4-python","title":"4. Python","text":"<ul> <li>Official Website: https://www.python.org </li> <li>Requests Library: https://docs.python-requests.org </li> <li>SQLite Integration: https://docs.python.org/3/library/sqlite3.html</li> </ul>"},{"location":"referencias/#5-sqlite","title":"5. SQLite","text":"<ul> <li>Official Documentation: https://sqlite.org/docs.html </li> <li>DB Browser for SQLite: https://sqlitebrowser.org/</li> </ul>"},{"location":"referencias/#6-mkdocs","title":"6. MkDocs","text":"<ul> <li>Official Website: https://www.mkdocs.org </li> <li>Material Theme for MkDocs: https://squidfunk.github.io/mkdocs-material/</li> </ul>"},{"location":"referencias/#7-additional-inspiration","title":"7. Additional Inspiration","text":"<ul> <li>Open-source IoT dashboard projects on GitHub.  </li> <li>Research on health data visualization and real-time monitoring systems.  </li> <li>Academic papers and case studies on smart healthcare technologies.</li> </ul>"},{"location":"resultados/","title":"Results \u2014 ProjetoSaudeV2","text":""},{"location":"resultados/#1-overview","title":"1. Overview","text":"<p>Following the integration of all core components \u2014 Python, Node-RED, SQLite, and uibuilder \u2014 the system operated successfully as a comprehensive, real-time platform for monitoring patient vital signs.</p>"},{"location":"resultados/#2-system-performance","title":"2. System Performance","text":"<ul> <li>Real-time updates: Data generated by the Python simulator was instantly reflected on the uibuilder dashboard.  </li> <li>Database storage: All readings were correctly inserted into the SQLite database without latency.  </li> <li>API functionality: The endpoints <code>/paciente</code> and <code>/api/v1/vitals</code> functioned as expected, consistently returning valid JSON responses.  </li> <li>Frontend behavior: The web interface displayed multiple patients simultaneously, updating automatically with each data refresh.</li> </ul>"},{"location":"resultados/#3-key-observations","title":"3. Key Observations","text":"Component Performance Result Python Generated and transmitted simulated vital signs accurately. Node-RED Processed and stored all incoming data without errors. SQLite Logged and retrieved all measurements reliably. uibuilder Displayed real-time updates smoothly in the browser."},{"location":"resultados/#4-example-api-output","title":"4. Example API Output","text":"<pre><code>{\n  \"data\": [\n    {\n      \"ts_ms\": 1739600000000,\n      \"heart_rate\": 78,\n      \"temperature\": 36.6,\n      \"spo2\": 97,\n      \"systolic\": 121,\n      \"diastolic\": 79\n    }\n  ]\n}\n</code></pre>"},{"location":"resultados/#5-evaluation","title":"5. Evaluation","text":"<p>The system successfully met all predefined objectives: - Complete integration between simulation, data processing, storage, and visualization. - Reliable real-time communication between backend and frontend components. - Stable performance during continuous and batch data transmission. - Clean, modular, and educational architecture suitable for academic demonstration.</p>"},{"location":"resultados/#6-conclusion","title":"6. Conclusion","text":"<p>ProjetoSaudeV2 effectively illustrates how automation and programming tools can be integrated to build a simple, efficient, and dependable healthcare monitoring system. It serves as a fully functional prototype that demonstrates real-time data flow across interconnected technologies and software layers.</p>"},{"location":"uibuilder/","title":"UI Builder \u2014 ProjetoSaudeV2","text":""},{"location":"uibuilder/#1-overview","title":"1. Overview","text":"<p>The uibuilder component provides the visual layer of the ProjetoSaudeV2 system. It enables users to monitor patient data in real time through a clean, responsive, and interactive web interface.</p>"},{"location":"uibuilder/#2-purpose","title":"2. Purpose","text":"<p>The user interface is designed to display real-time vital sign information for multiple patients, including: - Heart Rate (BPM) - Temperature (\u00b0C) - Blood Pressure (mmHg) - Oxygen Saturation (SpO\u2082)</p> <p>Each patient is represented as an individual card, which updates automatically whenever new data is received from Node-RED.</p>"},{"location":"uibuilder/#3-files-used","title":"3. Files Used","text":"File Description index.html Defines the overall structure and layout of the dashboard (HTML). index.css Controls design, colors, spacing, and visual presentation (CSS). index.js Manages real-time data communication and updates (JavaScript). <p>These files are located in the following directory: <code>ProjetoSaudeV2/ui/</code></p>"},{"location":"uibuilder/#4-example-layout","title":"4. Example Layout","text":"<pre><code>+----------------------------------------------------+\n| ProjetoSaudeV2 \u2014 Real-Time Patient Monitoring      |\n|----------------------------------------------------|\n| [ Patient A ] [ Patient B ] [ Patient C ] [ ... ]  |\n| Heart Rate: 78 bpm  | Temp: 36.6\u00b0C | SpO\u2082: 97%     |\n| Blood Pressure: 120 / 80 mmHg                      |\n+----------------------------------------------------+\n</code></pre> <p>The interface design uses soft colors, rounded components, and a modern layout suitable for medical and educational applications.</p>"},{"location":"uibuilder/#5-real-time-connection","title":"5. Real-Time Connection","text":"<ul> <li>The UI connects directly to Node-RED through the uibuilder socket.  </li> <li>When new data is received by the backend, the interface updates automatically.  </li> <li>No manual refresh is required \u2014 all data changes are reflected instantaneously in the browser.</li> </ul>"},{"location":"uibuilder/#6-customization","title":"6. Customization","text":"<p>The frontend can be modified and extended by editing the following files:</p> <ul> <li>index.css \u2014 Customize colors, alignment, and overall design.  </li> <li>index.js \u2014 Adjust update frequency or implement custom alerts (e.g., SpO\u2082 &lt; 90%).  </li> <li>index.html \u2014 Add new patient sections, widgets, or graphical elements.</li> </ul>"},{"location":"uibuilder/#7-summary","title":"7. Summary","text":"<p>The uibuilder dashboard transforms live data from the backend into a dynamic and user-friendly web interface. It serves as the visual bridge between automation and human interaction, offering simplicity, responsiveness, and real-time performance within the ProjetoSaudeV2 ecosystem.</p>"}]}